AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: ClearCompany-Paylocity Integration

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
  LogLevel:
    Type: String
    Default: info
    AllowedValues:
      - debug
      - info
      - warn
      - error

Globals:
  Function:
    Runtime: nodejs18.x
    Handler: index.handler
    MemorySize: 256
    Timeout: 30
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        LOG_LEVEL: !Ref LogLevel
        INTEGRATION_STATE_TABLE: !Ref IntegrationStateTable
        API_CREDENTIALS_SECRET_ARN: !Ref ApiCredentialsSecret
        DRY_RUN: "true"

Resources:
  # DynamoDB Tables
  IntegrationStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-integration-state
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Secrets Manager for API Credentials
  ApiCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}/api-credentials
      Description: API credentials for ClearCompany and Paylocity
      SecretString: '{"clearCompanyApiKey":"mock-key","paylocityApiKey":"mock-key"}'

  # Main API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        ApiKeyRequired: true
      EndpointConfiguration:
        Type: EDGE
      Cors:
        AllowMethods: "'GET,POST,PUT,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  AppEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${AWS::StackName}-app-events

  # Lambda Functions
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/health
      Handler: index.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId: !Ref ApiGateway

  RequisitionCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/requisition
      Handler: create.handler
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref AppEventBus
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/requisitions
            Method: POST
            RestApiId: !Ref ApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IntegrationStateTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref ApiCredentialsSecret
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt AppEventBus.Arn

  RequisitionUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/requisition
      Handler: update.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/requisitions/{id}
            Method: PUT
            RestApiId: !Ref ApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IntegrationStateTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref ApiCredentialsSecret

  WebhookHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/webhook
      Handler: handler.router
      Events:
        RequisitionStatusWebhook:
          Type: Api
          Properties:
            Path: /api/webhooks/requisition-status
            Method: POST
            RestApiId: !Ref ApiGateway
        CandidateStatusWebhook:
          Type: Api
          Properties:
            Path: /api/webhooks/candidate-status
            Method: POST
            RestApiId: !Ref ApiGateway
        AppRequisitionStatusEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - "com.clearcompany.app"
              detail-type:
                - "requisition.status_updated"
            EventBusName: !Ref AppEventBus
      # Additional function alias to route EventBridge to eventsHandler
  WebhookEventsHandlerAlias:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref WebhookHandlerFunction
  WebhookEventsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebhookHandlerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WebhookHandlerFunctionAppRequisitionStatusEvent.Arn

Outputs:
  ApiEndpoint:
    Description: Main API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
  ApiCredentialsSecretArn:
    Description: ARN of the Secrets Manager secret storing API credentials
    Value: !Ref ApiCredentialsSecret
  IntegrationStateTableName:
    Description: Name of DynamoDB table for integration state
    Value: !Ref IntegrationStateTable
  AppEventBusName:
    Description: Name of the application event bus
    Value: !Ref AppEventBus